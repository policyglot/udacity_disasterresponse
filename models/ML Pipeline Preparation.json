{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ML Pipeline Preparation\n",
    "Follow the instructions below to help you create your ML pipeline.\n",
    "### 1. Import libraries and load data from database.\n",
    "- Import Python libraries\n",
    "- Load dataset from database with [`read_sql_table`](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_sql_table.html)\n",
    "- Define feature and target variables X and Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
      "[nltk_data]   Unzipping tokenizers/punkt.zip.\n",
      "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
      "[nltk_data]   Unzipping corpora/wordnet.zip.\n",
      "[nltk_data] Downloading package averaged_perceptron_tagger to\n",
      "[nltk_data]     /root/nltk_data...\n",
      "[nltk_data]   Unzipping taggers/averaged_perceptron_tagger.zip.\n",
      "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
      "[nltk_data]   Unzipping corpora/stopwords.zip.\n"
     ]
    }
   ],
   "source": [
    "# import libraries\n",
    "import pandas as pd\n",
    "import time\n",
    "from sqlalchemy import create_engine\n",
    "\n",
    "# global for Random State \n",
    "seed = 2020\n",
    "\n",
    "# Specific Machine Learning Algorithms\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "#For Word Processing\n",
    "import re\n",
    "import nltk\n",
    "nltk.download(['punkt', 'wordnet', \n",
    "               'averaged_perceptron_tagger', 'stopwords'])\n",
    "from nltk.tokenize import word_tokenize\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer\n",
    "from nltk.corpus import stopwords\n",
    "stop_words = stopwords.words(\"english\")\n",
    "\n",
    "#For the Machine Learning Model\n",
    "from sklearn.multioutput import MultiOutputClassifier\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.model_selection import train_test_split \n",
    "\n",
    "# For Model Fit\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load data from database\n",
    "engine = create_engine('sqlite:///Messages.db')\n",
    "df = pd.read_sql(\"SELECT * FROM Messages\", engine)\n",
    "\n",
    "X = df['message']\n",
    "y = df.iloc[:, -36:]\n",
    "# To fix potential multi-output error for 'related' column\n",
    "y['related'].replace(to_replace=2,value=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['related', 'request', 'offer', 'aid_related', 'medical_help',\n",
       "       'medical_products', 'search_and_rescue', 'security', 'military',\n",
       "       'child_alone', 'water', 'food', 'shelter', 'clothing', 'money',\n",
       "       'missing_people', 'refugees', 'death', 'other_aid',\n",
       "       'infrastructure_related', 'transport', 'buildings', 'electricity',\n",
       "       'tools', 'hospitals', 'shops', 'aid_centers', 'other_infrastructure',\n",
       "       'weather_related', 'floods', 'storm', 'fire', 'earthquake', 'cold',\n",
       "       'other_weather', 'direct_report'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. Write a tokenization function to process your text data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def tokenize(text):\n",
    "    text = text.lower()\n",
    "    text = re.sub(r'[^A-Za-x0-9]', ' ', text)\n",
    "    lemmatizer = WordNetLemmatizer()\n",
    "    tokens = word_tokenize(text)\n",
    "    final_tokens = [lemmatizer.lemmatize(word) for word in tokens if word not in stop_words]\n",
    "    return final_tokens"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3. Build a machine learning pipeline\n",
    "This machine pipeline should take in the `message` column as input and output classification results on the other 36 categories in the dataset. You may find the [MultiOutputClassifier](http://scikit-learn.org/stable/modules/generated/sklearn.multioutput.MultiOutputClassifier.html) helpful for predicting multiple target variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "pipeline =  Pipeline([\n",
    "    ('vect', CountVectorizer(tokenizer=tokenize)),\n",
    "    ('tfidf', TfidfTransformer(smooth_idf=False)),\n",
    "    ('clf', RandomForestClassifier(random_state=seed))\n",
    "    ])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4. Train pipeline\n",
    "- Split data into train and test sets\n",
    "- Train pipeline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29.109911680221558\n"
     ]
    }
   ],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=2020)\n",
    "start = time.time()\n",
    "pipeline.fit(X_train, y_train)\n",
    "# predict on test data\n",
    "y_pred = pipeline.predict(X_test)\n",
    "end = time.time()\n",
    "print(end - start)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5. Test your model\n",
    "Report the f1 score, precision and recall for each output category of the dataset. You can do this by iterating through the columns and calling sklearn's `classification_report` on each."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.62      0.51      0.56      2024\n",
      "          1       0.86      0.91      0.88      6628\n",
      "\n",
      "avg / total       0.80      0.81      0.81      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.89      0.98      0.93      7158\n",
      "          1       0.81      0.42      0.56      1494\n",
      "\n",
      "avg / total       0.88      0.88      0.87      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       1.00      1.00      1.00      8623\n",
      "          1       0.00      0.00      0.00        29\n",
      "\n",
      "avg / total       0.99      1.00      0.99      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.71      0.90      0.79      5048\n",
      "          1       0.78      0.47      0.59      3604\n",
      "\n",
      "avg / total       0.74      0.72      0.71      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.92      1.00      0.96      7956\n",
      "          1       0.50      0.02      0.04       696\n",
      "\n",
      "avg / total       0.89      0.92      0.88      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.95      1.00      0.97      8219\n",
      "          1       0.87      0.03      0.06       433\n",
      "\n",
      "avg / total       0.95      0.95      0.93      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.97      1.00      0.99      8406\n",
      "          1       0.33      0.02      0.03       246\n",
      "\n",
      "avg / total       0.95      0.97      0.96      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.98      1.00      0.99      8494\n",
      "          1       0.00      0.00      0.00       158\n",
      "\n",
      "avg / total       0.96      0.98      0.97      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.97      1.00      0.98      8363\n",
      "          1       0.61      0.04      0.07       289\n",
      "\n",
      "avg / total       0.96      0.97      0.95      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       1.00      1.00      1.00      8652\n",
      "\n",
      "avg / total       1.00      1.00      1.00      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.94      1.00      0.97      8091\n",
      "          1       0.85      0.16      0.26       561\n",
      "\n",
      "avg / total       0.94      0.94      0.92      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.92      1.00      0.96      7662\n",
      "          1       0.90      0.35      0.51       990\n",
      "\n",
      "avg / total       0.92      0.92      0.91      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.92      1.00      0.96      7866\n",
      "          1       0.85      0.19      0.31       786\n",
      "\n",
      "avg / total       0.92      0.92      0.90      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.99      1.00      0.99      8514\n",
      "          1       0.75      0.09      0.16       138\n",
      "\n",
      "avg / total       0.98      0.98      0.98      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.98      1.00      0.99      8443\n",
      "          1       0.58      0.03      0.06       209\n",
      "\n",
      "avg / total       0.97      0.98      0.97      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.99      1.00      0.99      8553\n",
      "          1       0.00      0.00      0.00        99\n",
      "\n",
      "avg / total       0.98      0.99      0.98      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.96      1.00      0.98      8339\n",
      "          1       0.60      0.01      0.02       313\n",
      "\n",
      "avg / total       0.95      0.96      0.95      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.96      1.00      0.98      8255\n",
      "          1       0.83      0.09      0.16       397\n",
      "\n",
      "avg / total       0.95      0.96      0.94      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.88      0.99      0.93      7534\n",
      "          1       0.52      0.07      0.12      1118\n",
      "\n",
      "avg / total       0.83      0.87      0.83      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.93      1.00      0.96      8064\n",
      "          1       0.25      0.00      0.00       588\n",
      "\n",
      "avg / total       0.89      0.93      0.90      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.95      1.00      0.98      8249\n",
      "          1       0.70      0.02      0.03       403\n",
      "\n",
      "avg / total       0.94      0.95      0.93      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.95      1.00      0.97      8196\n",
      "          1       0.65      0.07      0.12       456\n",
      "\n",
      "avg / total       0.93      0.95      0.93      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.98      1.00      0.99      8473\n",
      "          1       0.50      0.01      0.01       179\n",
      "\n",
      "avg / total       0.97      0.98      0.97      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.99      1.00      1.00      8601\n",
      "          1       0.00      0.00      0.00        51\n",
      "\n",
      "avg / total       0.99      0.99      0.99      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.99      1.00      0.99      8552\n",
      "          1       0.00      0.00      0.00       100\n",
      "\n",
      "avg / total       0.98      0.99      0.98      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       1.00      1.00      1.00      8613\n",
      "          1       0.00      0.00      0.00        39\n",
      "\n",
      "avg / total       0.99      1.00      0.99      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.99      1.00      0.99      8543\n",
      "          1       0.00      0.00      0.00       109\n",
      "\n",
      "avg / total       0.97      0.99      0.98      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.96      1.00      0.98      8262\n",
      "          1       0.25      0.00      0.01       390\n",
      "\n",
      "avg / total       0.92      0.95      0.93      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.83      0.97      0.89      6223\n",
      "          1       0.86      0.49      0.62      2429\n",
      "\n",
      "avg / total       0.84      0.83      0.82      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.93      1.00      0.96      7927\n",
      "          1       0.85      0.19      0.31       725\n",
      "\n",
      "avg / total       0.92      0.93      0.91      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.92      0.99      0.96      7809\n",
      "          1       0.76      0.26      0.38       843\n",
      "\n",
      "avg / total       0.91      0.92      0.90      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.99      1.00      0.99      8542\n",
      "          1       0.50      0.04      0.07       110\n",
      "\n",
      "avg / total       0.98      0.99      0.98      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.96      0.99      0.98      7878\n",
      "          1       0.89      0.56      0.69       774\n",
      "\n",
      "avg / total       0.95      0.95      0.95      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.98      1.00      0.99      8476\n",
      "          1       1.00      0.02      0.03       176\n",
      "\n",
      "avg / total       0.98      0.98      0.97      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.95      1.00      0.97      8200\n",
      "          1       0.63      0.03      0.05       452\n",
      "\n",
      "avg / total       0.93      0.95      0.93      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.85      0.98      0.91      6957\n",
      "          1       0.75      0.30      0.43      1695\n",
      "\n",
      "avg / total       0.83      0.84      0.82      8652\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.6/site-packages/sklearn/metrics/classification.py:1135: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    }
   ],
   "source": [
    "issues = y_test.columns\n",
    "y_pred_df = pd.DataFrame(y_pred, columns=issues)\n",
    "for issue in issues:\n",
    "    print(classification_report(y_test[issue], \n",
    "                            y_pred_df[issue]))\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 6. Improve your model\n",
    "Use grid search to find better parameters. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "parameters = {#'scaler__with_mean':['True','False'],\n",
    "             'clf__n_estimators': [100, 300],\n",
    "             'clf__max_features':[5, 8]}\n",
    "\n",
    "cv = GridSearchCV(pipeline, parameters,n_jobs=4, verbose=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 4 candidates, totalling 12 fits\n",
      "[CV] clf__max_features=5, clf__n_estimators=100 ......................\n",
      "[CV] clf__max_features=5, clf__n_estimators=100 ......................\n",
      "[CV] clf__max_features=5, clf__n_estimators=100 ......................\n",
      "[CV] clf__max_features=5, clf__n_estimators=300 ......................\n",
      "[CV] ....... clf__max_features=5, clf__n_estimators=100, total=21.5min\n",
      "[CV] ....... clf__max_features=5, clf__n_estimators=100, total=21.7min\n",
      "[CV] clf__max_features=5, clf__n_estimators=300 ......................\n",
      "[CV] clf__max_features=5, clf__n_estimators=300 ......................\n",
      "[CV] ....... clf__max_features=5, clf__n_estimators=100, total=21.3min\n",
      "[CV] clf__max_features=8, clf__n_estimators=100 ......................\n",
      "[CV] ....... clf__max_features=5, clf__n_estimators=300, total=29.6min\n",
      "[CV] clf__max_features=8, clf__n_estimators=100 ......................\n",
      "[CV] ....... clf__max_features=8, clf__n_estimators=100, total= 9.2min\n",
      "[CV] clf__max_features=8, clf__n_estimators=100 ......................\n",
      "[CV] ....... clf__max_features=8, clf__n_estimators=100, total= 9.5min\n",
      "[CV] clf__max_features=8, clf__n_estimators=300 ......................\n",
      "[CV] ....... clf__max_features=8, clf__n_estimators=100, total= 9.5min\n",
      "[CV] clf__max_features=8, clf__n_estimators=300 ......................\n",
      "[CV] ....... clf__max_features=5, clf__n_estimators=300, total=55.5min\n",
      "[CV] clf__max_features=8, clf__n_estimators=300 ......................\n",
      "[CV] ....... clf__max_features=5, clf__n_estimators=300, total=57.6min\n",
      "[CV] ....... clf__max_features=8, clf__n_estimators=300, total=53.4min\n",
      "[CV] ....... clf__max_features=8, clf__n_estimators=300, total=51.6min\n",
      "[CV] ....... clf__max_features=8, clf__n_estimators=300, total=19.7min\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=4)]: Done  12 out of  12 | elapsed: 160.9min remaining:    0.0s\n",
      "[Parallel(n_jobs=4)]: Done  12 out of  12 | elapsed: 160.9min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9896.169993400574\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.77      0.31      0.44      2024\n",
      "          1       0.82      0.97      0.89      6628\n",
      "\n",
      "avg / total       0.81      0.82      0.79      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.89      0.99      0.93      7158\n",
      "          1       0.86      0.39      0.54      1494\n",
      "\n",
      "avg / total       0.88      0.88      0.87      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       1.00      1.00      1.00      8623\n",
      "          1       0.00      0.00      0.00        29\n",
      "\n",
      "avg / total       0.99      1.00      0.99      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.72      0.92      0.81      5048\n",
      "          1       0.82      0.49      0.62      3604\n",
      "\n",
      "avg / total       0.76      0.74      0.73      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.92      1.00      0.96      7956\n",
      "          1       0.20      0.00      0.00       696\n",
      "\n",
      "avg / total       0.86      0.92      0.88      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.95      1.00      0.97      8219\n",
      "          1       0.82      0.02      0.04       433\n",
      "\n",
      "avg / total       0.94      0.95      0.93      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.97      1.00      0.99      8406\n",
      "          1       0.00      0.00      0.00       246\n",
      "\n",
      "avg / total       0.94      0.97      0.96      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.98      1.00      0.99      8494\n",
      "          1       0.00      0.00      0.00       158\n",
      "\n",
      "avg / total       0.96      0.98      0.97      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.97      1.00      0.98      8363\n",
      "          1       0.00      0.00      0.00       289\n",
      "\n",
      "avg / total       0.93      0.97      0.95      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       1.00      1.00      1.00      8652\n",
      "\n",
      "avg / total       1.00      1.00      1.00      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.94      1.00      0.97      8091\n",
      "          1       0.96      0.10      0.18       561\n",
      "\n",
      "avg / total       0.94      0.94      0.92      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.91      1.00      0.95      7662\n",
      "          1       0.95      0.23      0.37       990\n",
      "\n",
      "avg / total       0.91      0.91      0.88      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.92      1.00      0.96      7866\n",
      "          1       0.89      0.08      0.14       786\n",
      "\n",
      "avg / total       0.91      0.92      0.88      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.98      1.00      0.99      8514\n",
      "          1       1.00      0.03      0.06       138\n",
      "\n",
      "avg / total       0.98      0.98      0.98      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.98      1.00      0.99      8443\n",
      "          1       0.80      0.02      0.04       209\n",
      "\n",
      "avg / total       0.97      0.98      0.96      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.99      1.00      0.99      8553\n",
      "          1       0.00      0.00      0.00        99\n",
      "\n",
      "avg / total       0.98      0.99      0.98      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.96      1.00      0.98      8339\n",
      "          1       0.00      0.00      0.00       313\n",
      "\n",
      "avg / total       0.93      0.96      0.95      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.95      1.00      0.98      8255\n",
      "          1       1.00      0.02      0.03       397\n",
      "\n",
      "avg / total       0.96      0.95      0.93      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.87      1.00      0.93      7534\n",
      "          1       0.56      0.02      0.03      1118\n",
      "\n",
      "avg / total       0.83      0.87      0.81      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.93      1.00      0.96      8064\n",
      "          1       0.50      0.00      0.00       588\n",
      "\n",
      "avg / total       0.90      0.93      0.90      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.95      1.00      0.98      8249\n",
      "          1       1.00      0.00      0.00       403\n",
      "\n",
      "avg / total       0.96      0.95      0.93      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.95      1.00      0.97      8196\n",
      "          1       0.64      0.02      0.03       456\n",
      "\n",
      "avg / total       0.93      0.95      0.92      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.98      1.00      0.99      8473\n",
      "          1       0.00      0.00      0.00       179\n",
      "\n",
      "avg / total       0.96      0.98      0.97      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.99      1.00      1.00      8601\n",
      "          1       0.00      0.00      0.00        51\n",
      "\n",
      "avg / total       0.99      0.99      0.99      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.99      1.00      0.99      8552\n",
      "          1       0.00      0.00      0.00       100\n",
      "\n",
      "avg / total       0.98      0.99      0.98      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       1.00      1.00      1.00      8613\n",
      "          1       0.00      0.00      0.00        39\n",
      "\n",
      "avg / total       0.99      1.00      0.99      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.99      1.00      0.99      8543\n",
      "          1       0.00      0.00      0.00       109\n",
      "\n",
      "avg / total       0.97      0.99      0.98      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.96      1.00      0.98      8262\n",
      "          1       0.50      0.00      0.01       390\n",
      "\n",
      "avg / total       0.93      0.95      0.93      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.80      0.98      0.88      6223\n",
      "          1       0.89      0.37      0.52      2429\n",
      "\n",
      "avg / total       0.82      0.81      0.78      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.92      1.00      0.96      7927\n",
      "          1       1.00      0.02      0.04       725\n",
      "\n",
      "avg / total       0.92      0.92      0.88      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.91      1.00      0.95      7809\n",
      "          1       0.79      0.05      0.09       843\n",
      "\n",
      "avg / total       0.90      0.91      0.87      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.99      1.00      0.99      8542\n",
      "          1       0.00      0.00      0.00       110\n",
      "\n",
      "avg / total       0.97      0.99      0.98      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.94      1.00      0.97      7878\n",
      "          1       0.90      0.32      0.47       774\n",
      "\n",
      "avg / total       0.93      0.94      0.92      8652\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.6/site-packages/sklearn/metrics/classification.py:1135: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.98      1.00      0.99      8476\n",
      "          1       1.00      0.01      0.02       176\n",
      "\n",
      "avg / total       0.98      0.98      0.97      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.95      1.00      0.97      8200\n",
      "          1       0.67      0.01      0.02       452\n",
      "\n",
      "avg / total       0.93      0.95      0.92      8652\n",
      "\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.85      0.99      0.91      6957\n",
      "          1       0.84      0.28      0.42      1695\n",
      "\n",
      "avg / total       0.85      0.85      0.82      8652\n",
      "\n"
     ]
    }
   ],
   "source": [
    "start = time.time()\n",
    "cv.fit(X_train, y_train)\n",
    "# predict on test data\n",
    "y_pred = cv.predict(X_test)\n",
    "end = time.time()\n",
    "print(end-start)\n",
    "\n",
    "issues = y_test.columns\n",
    "y_pred_df = pd.DataFrame(y_pred, columns=issues)\n",
    "for issue in issues:\n",
    "    print(classification_report(y_test[issue], \n",
    "                            y_pred_df[issue]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7. Test your model\n",
    "\n",
    "Show the accuracy, precision, and recall of the tuned model.  \n",
    "\n",
    "Since this project focuses on code quality, process, and  pipelines, there is no minimum performance metric needed to pass. However, make sure to fine tune your models for accuracy, precision and recall to make your project stand out - especially for your portfolio!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 8. Try improving your model further. Here are a few ideas:\n",
    "* try other machine learning algorithms\n",
    "* add other features besides the TF-IDF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=None, error_score='raise',\n",
       "       estimator=Pipeline(memory=None,\n",
       "     steps=[('vect', CountVectorizer(analyzer='word', binary=False, decode_error='strict',\n",
       "        dtype=<class 'numpy.int64'>, encoding='utf-8', input='content',\n",
       "        lowercase=True, max_df=1.0, max_features=None, min_df=1,\n",
       "        ngram_range=(1, 1), preprocessor=None, stop_words=None,\n",
       "        strip...n_jobs=1,\n",
       "            oob_score=False, random_state=2020, verbose=0,\n",
       "            warm_start=False))]),\n",
       "       fit_params=None, iid=True, n_jobs=4,\n",
       "       param_grid={'clf__n_estimators': [100, 300], 'clf__max_features': [5, 8]},\n",
       "       pre_dispatch='2*n_jobs', refit=True, return_train_score='warn',\n",
       "       scoring=None, verbose=2)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 9. Export your model as a pickle file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle\n",
    "saved_clf = pickle.dumps(cv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'clf__max_features': 8, 'clf__n_estimators': 100}"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf2.best_params_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 10. Use this notebook to complete `train.py`\n",
    "Use the template file attached in the Resources folder to write a script that runs the steps above to create a database and export a model based on a new dataset specified by the user."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf2 = pickle.loads(saved_clf)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
